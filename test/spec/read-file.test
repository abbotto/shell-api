#!/usr/bin/env sh

set -u

SPEC_NAME='read_file'
export SPEC_NAME

tmp=$(mktemp -d)

# Remove the temporary directory when the script quits
# shellcheck disable=SC2064
trap "rm -rf '${tmp}'" EXIT INT HUP TERM

. ./test/tmp/shell-api
./test/util/test-intro.sh

# Generate a temporary 'env' file
echo 'HELLO="WORLD"' | tee "${tmp}"/.env.testA >/dev/null 2>&1
echo 'HELLO="WORLD"' | tee "${tmp}"/.env.testB >/dev/null 2>&1
echo 'WORLD="HELLO"' | tee -a "${tmp}"/.env.testB >/dev/null 2>&1

spec --describe "∙ should pass when a file is read correctly..."
cmd=$(read_file "${tmp}"/.env.testA)
exit_code="${?}"
spec --evaluate "echo ${exit_code} >/dev/null 2>&1"
if [ "${cmd}" = 'HELLO="WORLD"' ] && [ "${SPEC_EXIT_STATUS}" = 0 ]; then
	exit_code=0
fi
spec --assert "${SPEC_EXIT_STATUS}" "${exit_code}"

spec --describe "∙ should pass when a line is read from a file correctly..."
cmd=$(read_file "${tmp}"/.env.testB 2)
exit_code="${?}"
spec --evaluate "echo ${exit_code} >/dev/null 2>&1"
if [ "${cmd}" = 'WORLD="HELLO"' ] && [ "${SPEC_EXIT_STATUS}" = 0 ]; then
	exit_code=0
fi
spec --assert "${SPEC_EXIT_STATUS}" "${exit_code}"

spec --describe "∙ should pass when the argument order is correct (A)..."
cmd=$(read_file "${tmp}"/.env.testB 2)
exit_code="${?}"
spec --evaluate "echo ${exit_code} >/dev/null 2>&1"
if [ "${cmd}" = 'WORLD="HELLO"' ] && [ "${SPEC_EXIT_STATUS}" = 0 ]; then
	exit_code=0
fi
spec --assert "${SPEC_EXIT_STATUS}" "${exit_code}"

spec --describe "∙ should pass when the argument order is correct (B)..."
cmd=$(read_file 2 "${tmp}"/.env.testB)
exit_code="${?}"
spec --evaluate "echo ${exit_code} >/dev/null 2>&1"
if [ "${cmd}" = 'WORLD="HELLO"' ] && [ "${SPEC_EXIT_STATUS}" = 0 ]; then
	exit_code=0
fi
spec --assert "${SPEC_EXIT_STATUS}" "${exit_code}"

spec --describe "∙ should fail when the line number is a non-integer value..."
spec --evaluate "read_file abc123 ${tmp}/.env.testB >/dev/null 2>&1"
spec --assert "${?}" 1

spec --describe "∙ should fail when the file isn't found..."
spec --evaluate "read_file 1 ${tmp}/.env.testC >/dev/null 2>&1"
spec --assert "${?}" 127

spec --describe "∙ should fail when the line number doesn't exist..."
spec --evaluate "read_file 3 ${tmp}/.env.testB >/dev/null 2>&1"
spec --assert "${?}" 127

spec --describe "∙ should fail when there are not enough arguments..."
spec --evaluate "read_file >/dev/null 2>&1"
spec --assert "${?}" 127

spec --describe "∙ should fail when there are too many arguments..."
spec --evaluate "read_file 1 2 3 4 >/dev/null 2>&1"
spec --assert "${?}" 1

. ./test/util/test-outro.sh
